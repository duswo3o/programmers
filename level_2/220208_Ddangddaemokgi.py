'''
땅따먹기 게임을 하려고 합니다. 
땅따먹기 게임의 땅(land)은 총 N행 4열로 이루어져 있고, 모든 칸에는 점수가 쓰여 있습니다. 
1행부터 땅을 밟으며 한 행씩 내려올 때, 각 행의 4칸 중 한 칸만 밟으면서 내려와야 합니다. 
단, 땅따먹기 게임에는 한 행씩 내려올 때, 같은 열을 연속해서 밟을 수 없는 특수 규칙이 있습니다.

예를 들면,

| 1 | 2 | 3 | 5 |

| 5 | 6 | 7 | 8 |

| 4 | 3 | 2 | 1 |

로 땅이 주어졌다면, 1행에서 네번째 칸 (5)를 밟았으면, 2행의 네번째 칸 (8)은 밟을 수 없습니다.

마지막 행까지 모두 내려왔을 때, 얻을 수 있는 점수의 최대값을 return하는 solution 함수를 완성해 주세요. 
위 예의 경우, 1행의 네번째 칸 (5), 2행의 세번째 칸 (7), 3행의 첫번째 칸 (4) 땅을 밟아 16점이 최고점이 되므로 16을 return 하면 됩니다.
'''

# 1번 풀이 - 처음 제출했을때 오류가 나서 2번 풀이로 제출하고 오류 수정
def solution(land):
    for i in range(1,len(land)): # 두 번째 행부터 마지막 행까지 반복
        pre_idx = land[i-1].index(max(land[i-1])) # 이전 행에서의 최댓값 인덱스 저장
        l = land[i-1][pre_idx] # 이전 행의 최댓값
        for j in range(4): # 각행의 원소에 대해
            if j!=pre_idx: # 이전 행의 최댓값의 인덱스와 다르다면
                land[i][j]+=l # 이전 행의 최대값을 더함
            else: # 이전 행의 최댓값 인덱스와 같다면
                pre_list = land[i-1] # 이전행에서
                del pre_list[pre_list.index(max(pre_list))] # 최대값을 제거한 리스트를 만들어
                land[i][j]+=max(pre_list) # 최대값이 제거된 리스트중에서 최대값을 더함

    return max(land[-1]) # 마지막 행에서의 최대값 반환

#######################################################################################################
# 2번 풀이
def solution(land):
    for i in range(1,len(land)): # 두 번째 행에서 마지막 행까지 반복
        # 이전행의 같은 인덱스를 제외한 최대값을 현재 행에 더하는 방식
        land[i][0] += max(land[i-1][1],land[i-1][2],land[i-1][3]) 
        land[i][1] += max(land[i-1][0],land[i-1][2],land[i-1][3])
        land[i][2] += max(land[i-1][1],land[i-1][0],land[i-1][3])
        land[i][3] += max(land[i-1][1],land[i-1][2],land[i-1][0])
        
    return max(land[-1]) # 마지막 행에서의 최대값 반환

'''
만약 한 행의 길이가 많이 큰 수가 되면 첫 번째 풀이로 하는게 맞는거 같은데,,,?
'''
        

land = [[1,2,3,5],[5,6,7,8],[4,3,2,1]]
print(solution([[4,3,2,1],[2,2,2,1],[6,6,6,4],[8,7,6,5]]))